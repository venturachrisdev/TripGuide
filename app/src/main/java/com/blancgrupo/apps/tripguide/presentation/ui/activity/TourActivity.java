package com.blancgrupo.apps.tripguide.presentation.ui.activity;import android.arch.lifecycle.LifecycleRegistry;import android.arch.lifecycle.LifecycleRegistryOwner;import android.arch.lifecycle.Observer;import android.arch.lifecycle.ViewModelProviders;import android.content.Context;import android.content.Intent;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.support.v4.app.FragmentManager;import android.support.v4.app.FragmentStatePagerAdapter;import android.support.v4.view.ViewPager;import android.support.v7.app.ActionBar;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.support.v7.widget.Toolbar;import android.view.MenuItem;import android.widget.Toast;import com.blancgrupo.apps.tripguide.MyApplication;import com.blancgrupo.apps.tripguide.R;import com.blancgrupo.apps.tripguide.data.entity.api.ParentTour;import com.blancgrupo.apps.tripguide.data.entity.api.ParentTourWrapper;import com.blancgrupo.apps.tripguide.data.entity.api.Photo;import com.blancgrupo.apps.tripguide.data.entity.api.TourCover;import com.blancgrupo.apps.tripguide.presentation.di.component.DaggerActivityComponent;import com.blancgrupo.apps.tripguide.presentation.di.module.ActivityModule;import com.blancgrupo.apps.tripguide.presentation.ui.fragment.TourCoverFragment;import com.blancgrupo.apps.tripguide.presentation.ui.viewmodel.TourVMFactory;import com.blancgrupo.apps.tripguide.presentation.ui.viewmodel.TourViewModel;import com.blancgrupo.apps.tripguide.utils.ApiUtils;import com.blancgrupo.apps.tripguide.utils.Constants;import java.util.ArrayList;import java.util.List;import javax.inject.Inject;import butterknife.BindView;import butterknife.ButterKnife;import uk.co.chrisjenx.calligraphy.CalligraphyContextWrapper;public class TourActivity extends AppCompatActivity        implements LifecycleRegistryOwner, ApiUtils.SingleTourListener {    @Inject    TourVMFactory tourVMFactory;    TourViewModel tourViewModel;    private LifecycleRegistry registry = new LifecycleRegistry(this);    @BindView(R.id.toolbar)    Toolbar toolbar;    @BindView(R.id.viewpager)    ViewPager viewPager;    @Override    protected void attachBaseContext(Context newBase) {        super.attachBaseContext(CalligraphyContextWrapper.wrap(newBase));    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_tour);        ButterKnife.bind(this);        setSupportActionBar(toolbar);        ActionBar actionBar = getSupportActionBar();        if (actionBar != null) {            actionBar.setDisplayHomeAsUpEnabled(true);        }        DaggerActivityComponent                .builder()                .activityModule(new ActivityModule())                .netComponent(((MyApplication) getApplication()).getNetComponent())                .build()                .inject(this);        tourViewModel = ViewModelProviders.of(this, tourVMFactory)                .get(TourViewModel.class);        Intent i = getIntent();        Bundle data = i.getExtras();        if (data == null || !data.containsKey(Constants.EXTRA_PLACE_TOUR_ID)) {            Toast.makeText(this, R.string.no_tour_selected, Toast.LENGTH_LONG).show();            finish();        }        String id = data.getString(Constants.EXTRA_PLACE_TOUR_ID);        tourViewModel.getParentTour(id).observe(this, new Observer<ParentTourWrapper>() {            @Override            public void onChanged(@Nullable ParentTourWrapper parentTourWrapper) {                if (parentTourWrapper != null) {                    ParentTour parentTour = parentTourWrapper.getPlace();                    if (parentTour != null && parentTourWrapper.getStatus().equals("OK")) {                        bindParentTour(parentTour);                        //statesRecyclerViewAdapter.setState(StatesRecyclerViewAdapter.STATE_NORMAL);                    } else {                        Toast.makeText(TourActivity.this, parentTourWrapper.getStatus(),                                Toast.LENGTH_SHORT).show();                        //statesRecyclerViewAdapter.setState(StatesRecyclerViewAdapter.STATE_EMPTY);                    }                } else {                    Toast.makeText(TourActivity.this, "Dude is null", Toast.LENGTH_SHORT).show();                    //statesRecyclerViewAdapter.setState(StatesRecyclerViewAdapter.STATE_ERROR);                }            }        });    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case android.R.id.home:                onBackPressed();                break;        }        return super.onOptionsItemSelected(item);    }    private void bindParentTour(ParentTour parentTour) {        toolbar.setTitle(parentTour.getName());        //viewPager.setIndicatorTintColorScheme(Color.WHITE, Color.GRAY);        final Photo photo = parentTour.getPhoto();        List<Photo> allPhotos = null;        allPhotos = parentTour.getPhotos();        if (photo != null) {            final List<Photo> photos = new ArrayList<>();            photos.add(photo);        }        viewPager.setPageMargin(40);        viewPager.setAdapter(new TourCoverPagerAdapter(                getSupportFragmentManager(), parentTour.getTours(), allPhotos));    }    @Override    public LifecycleRegistry getLifecycle() {        return this.registry;    }    @Override    public void onSingleTourClick(TourCover placeCover, String imageUrl) {        Intent intent = new Intent(this, SingleTourActivity.class);        intent.putExtra(Constants.EXTRA_SINGLE_TOUR_ID, placeCover.getId());        intent.putExtra(Constants.EXTRA_PLACE_ID, toolbar.getTitle().toString());        if (imageUrl != null) {            intent.putExtra(Constants.EXTRA_IMAGE_URL, imageUrl);        }        startActivity(intent);    }    public class TourCoverPagerAdapter extends FragmentStatePagerAdapter {        List<TourCover> tours;        List<Photo> photos;        public TourCoverPagerAdapter(FragmentManager fm, List<TourCover> tours, List<Photo> photos) {            super(fm);            this.tours = tours;            this.photos = photos;        }        @Override        public int getCount() {            if (tours != null) {                return tours.size();            }            return 0;        }        @Override        public Fragment getItem(int position) {            TourCoverFragment fragment = new TourCoverFragment();            Bundle args = new Bundle();            TourCover cover = tours.get(position);            args.putParcelable(Constants.EXTRA_SINGLE_TOUR_ID, cover);            Photo currentPhoto = null;            if (photos !=  null) {                if (photos.size() >= position) {                    currentPhoto = photos.get(position);                } else {                    currentPhoto = photos.get(0);                }            }            if (currentPhoto != null) {                String pic_url = ApiUtils.getPlacePhotoUrl((MyApplication) TourActivity.this.getApplication(),                        currentPhoto.getReference(), currentPhoto.getWidth());                args.putString(Constants.EXTRA_IMAGE_URL, pic_url);            }            fragment.setArguments(args);            return fragment;        }    }}